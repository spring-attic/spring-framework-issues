<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- enable annotation-config in order to process @Configuration beans -->
	<context:annotation-config/>

	<!-- include the AppConfig @Configuration class -->
	<bean class="org.springframework.issues.config.xml_centric.AppConfig"/>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:failFast="true"
		p:configLocation="classpath:org/springframework/issues/config/mybatis-config.xml" />

	<bean class="org.mybatis.spring.SqlSessionTemplate"
		c:sqlSessionFactory-ref="sqlSessionFactory" />

	<!-- in the XML-centric case, MapperScannerConfigurer works as expected, because
	     this BeanDefinitionRegistryPostProcessor is added early enough to be processed
	     at the right time.
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="org.springframework.issues.dao" />

	<!-- Therefore there is no need for this workaround
	<bean id="testMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"
		p:mapperInterface="org.springframework.issues.dao.TestDao"
		p:sqlSessionFactory-ref="sqlSessionFactory" />
	-->

</beans>
